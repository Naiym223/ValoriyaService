import { NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { collection, addDoc, getDocs, query, orderBy, limit, where, doc, updateDoc } from 'firebase/firestore';
import { rankUserInGroup } from '@/lib/roblox';

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { gameKey, targetUserId, targetUsername, toRank, groupId, reason, robloxApiKey } = body;

    if (!gameKey || !targetUserId || !toRank || !groupId || !robloxApiKey) {
      return NextResponse.json({ 
        error: 'Missing required fields: gameKey, targetUserId, toRank, groupId, robloxApiKey' 
      }, { status: 400 });
    }

    if (!gameKey.startsWith('VLR_')) {
      return NextResponse.json({ 
        error: 'Invalid game key format' 
      }, { status: 400 });
    }

    const usersQuery = query(collection(db, 'users'), where('gameKey', '==', gameKey));
    const userSnapshot = await getDocs(usersQuery);
    
    if (userSnapshot.empty) {
      return NextResponse.json({ 
        error: 'Invalid game key' 
      }, { status: 401 });
    }

    const userDoc = userSnapshot.docs[0];
    const userData = userDoc.data();

    if (!userData.subscription || userData.subscription.status !== 'active') {
      return NextResponse.json({ 
        error: 'Active subscription required' 
      }, { status: 403 });
    }

    try {
      const rankingResult = await rankUserInGroup(groupId, targetUserId, parseInt(toRank), robloxApiKey);

      const rankingRequest = {
        gameKey,
        targetUserId: parseInt(targetUserId),
        targetUsername: targetUsername || 'Unknown',
        toRank: parseInt(toRank),
        groupId: parseInt(groupId),
        reason: reason || '',
        status: 'success',
        result: rankingResult,
        createdAt: new Date(),
        completedAt: new Date(),
        userId: userDoc.id
      };

      await addDoc(collection(db, 'rankingRequests'), rankingRequest);

      const currentStats = userData.stats || { successfulRanks: 0, invalidRequests: 0, failedRequests: 0 };
      await updateDoc(doc(db, 'users', userDoc.id), {
        stats: {
          ...currentStats,
          successfulRanks: currentStats.successfulRanks + 1
        },
        lastActive: new Date()
      });

      return NextResponse.json({ 
        success: true, 
        message: 'User ranked successfully',
        data: {
          id: rankingRequest.targetUserId,
          username: rankingRequest.targetUsername,
          newRank: rankingRequest.toRank,
          groupId: rankingRequest.groupId,
          timestamp: rankingRequest.completedAt
        }
      });

    } catch (rankingError: any) {
      const failedRequest = {
        gameKey,
        targetUserId: parseInt(targetUserId),
        targetUsername: targetUsername || 'Unknown',
        toRank: parseInt(toRank),
        groupId: parseInt(groupId),
        reason: reason || '',
        status: 'failed',
        error: rankingError.message,
        createdAt: new Date(),
        userId: userDoc.id
      };

      await addDoc(collection(db, 'rankingRequests'), failedRequest);

      const currentStats = userData.stats || { successfulRanks: 0, invalidRequests: 0, failedRequests: 0 };
      await updateDoc(doc(db, 'users', userDoc.id), {
        stats: {
          ...currentStats,
          failedRequests: currentStats.failedRequests + 1
        },
        lastActive: new Date()
      });

      return NextResponse.json({ 
        error: `Ranking failed: ${rankingError.message}` 
      }, { status: 400 });
    }

  } catch (error) {
    console.error('Error processing ranking request:', error);
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const gameKey = searchParams.get('gameKey');
    const limitParam = searchParams.get('limit') || '10';
    const requestLimit = Math.min(parseInt(limitParam), 100);

    if (!gameKey) {
      return NextResponse.json({ 
        error: 'Game key required' 
      }, { status: 400 });
    }

    const usersQuery = query(collection(db, 'users'), where('gameKey', '==', gameKey));
    const userSnapshot = await getDocs(usersQuery);
    
    if (userSnapshot.empty) {
      return NextResponse.json({ 
        error: 'Invalid game key' 
      }, { status: 401 });
    }

    const userDoc = userSnapshot.docs[0];

    const requestsQuery = query(
      collection(db, 'rankingRequests'),
      where('userId', '==', userDoc.id),
      orderBy('createdAt', 'desc'),
      limit(requestLimit)
    );

    const requestsSnapshot = await getDocs(requestsQuery);
    const requests: any[] = [];

    requestsSnapshot.forEach((doc) => {
      const data = doc.data();
      requests.push({
        id: doc.id,
        targetUserId: data.targetUserId,
        targetUsername: data.targetUsername,
        toRank: data.toRank,
        groupId: data.groupId,
        status: data.status,
        reason: data.reason,
        createdAt: data.createdAt?.toDate(),
        completedAt: data.completedAt?.toDate(),
        error: data.error
      });
    });

    return NextResponse.json({ 
      success: true, 
      data: requests,
      total: requests.length
    });

  } catch (error) {
    console.error('Error fetching ranking requests:', error);
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}
EOF  
